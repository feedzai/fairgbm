# task type, supports train and predict
task = train

# boosting type, support gbdt for now, alias: boosting, boost
boosting_type = gbdt

# application type, support following application
# regression , regression task
# binary , binary classification task
# lambdarank , LambdaRank task
# constrained_cross_entropy , constrained optimization task (classification)
# alias: application, app
objective = constrained_cross_entropy   # training FairGBM!

# eval metrics, support multi metric, delimited by ',' , support following metrics
# l1
# l2 , default metric for regression
# ndcg , default metric for lambdarank
# auc
# binary_logloss , default metric for binary
# binary_error
metric = binary_logloss,auc

# frequency for metric output
metric_freq = 5

# true if need output metric for training data, alias: training_metric, train_metric
is_training_metric = true

# training data
# if existing weight file, should name to "binary.train.weight"
# alias: train_data, train
data = BAF-base.train

# validation data, support multi validation data, separated by ','
# if existing weight file, should name to "binary.test.weight"
# alias: valid, test, test_data,
valid_data = BAF-base.test

# first row has column names
has_header=True

# name of label column
label_column = name:fraud_bool

# ignore the sensitive attribute column for training (plus the date column)
ignore_column = name:customer_age_category,month

# all categorical columns
categorical_column = name:payment_type,employment_status,housing_status,source,device_os

# number of trees(iterations), alias: num_tree, num_iteration, num_iterations, num_round, num_rounds
num_trees = 1000

# output model file
output_model = FairGBM_model.txt

# fixed random state for reproducibility
# (if multi-threaded may still result in variable results)
random_state = 42

#  ** FairGBM-specific parameters **
# function to use as a differentiable proxy for the step-wise function
constraint_stepwise_proxy=cross_entropy

# column that contains groups to enforce constraints over (e.g., FPR or FNR equality)
constraint_group_column=name:customer_age_category

# constraint type
constraint_type=fpr

# small epsilon of allowed metric divergence between groups
constraint_fpr_threshold=0

# learning rate for the Lagrangian multipliers (ascent step)
# use larger values with larger datasets
# fuzzy rule of thumb: use 1/20th to 1/10th of the dataset's length
lagrangian_learning_rate=10000

# constraints on global metrics at threshold=0.5
global_constraint_type=fpr,fnr

# target: less than or equal to 5% global FPR
global_target_fpr=0.05

# target: less than or equal to 70% global FNR
global_target_fnr=0.70
